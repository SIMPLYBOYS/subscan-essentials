// Code generated by mockery 2.7.5. DO NOT EDIT.

package mocks

import (
	subscanmodel "github.com/CoolBitX-Technology/subscan/model"
	model "github.com/CoolBitX-Technology/subscan/plugins/reward/model"
	mock "github.com/stretchr/testify/mock"
)

// RewardService is an autogenerated mock type for the RewardService type
type RewardService struct {
	mock.Mock
}

// GetAccountNonce provides a mock function with given fields: addr
func (_m *RewardService) GetAccountNonce(addr string) (int, error) {
	ret := _m.Called(addr)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(addr)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(addr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRewardListJson provides a mock function with given fields: page, row, addr
func (_m *RewardService) GetRewardListJson(page int, row int, addr string) ([]model.Reward, error) {
	ret := _m.Called(page, row, addr)

	var r0 []model.Reward
	if rf, ok := ret.Get(0).(func(int, int, string) []model.Reward); ok {
		r0 = rf(page, row, addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Reward)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, string) error); ok {
		r1 = rf(page, row, addr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRewardEvent provides a mock function with given fields: b, e, params
func (_m *RewardService) NewRewardEvent(b *subscanmodel.Block, e *subscanmodel.Event, params []subscanmodel.EventParam) error {
	ret := _m.Called(b, e, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(*subscanmodel.Block, *subscanmodel.Event, []subscanmodel.EventParam) error); ok {
		r0 = rf(b, e, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
